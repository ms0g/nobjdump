#include "opcodeTable.h"

OpcodeTable::OpcodeTable() {
    mOpcodeToMnemonicList = {
            {0x00, Mnemonic{"BRK", AddressingMode::IMP}},
            {0x18, Mnemonic{"CLC", AddressingMode::IMP}},
            {0xD8, Mnemonic{"CLD", AddressingMode::IMP}},
            {0x58, Mnemonic{"CLI", AddressingMode::IMP}},
            {0xB8, Mnemonic{"CLV", AddressingMode::IMP}},
            {0xCA, Mnemonic{"DEX", AddressingMode::IMP}},
            {0x88, Mnemonic{"DEY", AddressingMode::IMP}},
            {0xE8, Mnemonic{"INX", AddressingMode::IMP}},
            {0xC8, Mnemonic{"INY", AddressingMode::IMP}},
            {0xEA, Mnemonic{"NOP", AddressingMode::IMP}},
            {0x48, Mnemonic{"PHA", AddressingMode::IMP}},
            {0x08, Mnemonic{"PHP", AddressingMode::IMP}},
            {0x68, Mnemonic{"PLA", AddressingMode::IMP}},
            {0x28, Mnemonic{"PLP", AddressingMode::IMP}},
            {0x40, Mnemonic{"RTI", AddressingMode::IMP}},
            {0x60, Mnemonic{"RTS", AddressingMode::IMP}},
            {0x38, Mnemonic{"SEC", AddressingMode::IMP}},
            {0xF8, Mnemonic{"SED", AddressingMode::IMP}},
            {0x78, Mnemonic{"SEI", AddressingMode::IMP}},
            {0xAA, Mnemonic{"TAX", AddressingMode::IMP}},
            {0xA8, Mnemonic{"TAY", AddressingMode::IMP}},
            {0xBA, Mnemonic{"TSX", AddressingMode::IMP}},
            {0x8A, Mnemonic{"TXA", AddressingMode::IMP}},
            {0x9A, Mnemonic{"TXS", AddressingMode::IMP}},
            {0x98, Mnemonic{"TYA", AddressingMode::IMP}},
            {0xEA, Mnemonic{"NOP", AddressingMode::IMP}},
            {0xA9, Mnemonic{"LDA #${}", AddressingMode::IMM, 1}},
            {0xAD, Mnemonic{"LDA ${}", AddressingMode::ABS, 2}},
            {0xBD, Mnemonic{"LDA ${},X", AddressingMode::X_IN_ABS, 2}},
            {0xB9, Mnemonic{"LDA ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0xA5, Mnemonic{"LDA ${}", AddressingMode::ZP, 1}},
            {0xB5, Mnemonic{"LDA ${},X", AddressingMode::X_IN_ZP, 1}},
            {0xA1, Mnemonic{"LDA (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0xB1, Mnemonic{"LDA (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0xA2, Mnemonic{"LDX #${}", AddressingMode::IMM, 1}},
            {0xAE, Mnemonic{"LDX ${}", AddressingMode::ABS, 2}},
            {0xBE, Mnemonic{"LDX ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0xA6, Mnemonic{"LDX ${}", AddressingMode::ZP, 1}},
            {0xB6, Mnemonic{"LDX ${},X", AddressingMode::Y_IN_ZP, 1}},
            {0xA0, Mnemonic{"LDY #${}", AddressingMode::IMM, 1}},
            {0xAC, Mnemonic{"LDY ${}", AddressingMode::ABS, 2}},
            {0xBC, Mnemonic{"LDY ${},Y", AddressingMode::X_IN_ABS, 2}},
            {0xA4, Mnemonic{"LDY ${}", AddressingMode::ZP, 1}},
            {0xB4, Mnemonic{"LDY ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x8D, Mnemonic{"STA ${}", AddressingMode::ABS, 2}},
            {0x9D, Mnemonic{"STA ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x99, Mnemonic{"STA ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0x85, Mnemonic{"STA ${}", AddressingMode::ZP, 1}},
            {0x95, Mnemonic{"STA ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x81, Mnemonic{"STA (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0x91, Mnemonic{"STA (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0x8E, Mnemonic{"STX ${}", AddressingMode::ABS, 2}},
            {0x86, Mnemonic{"STX ${}", AddressingMode::ZP, 1}},
            {0x96, Mnemonic{"STX ${},X", AddressingMode::Y_IN_ZP, 1}},
            {0x8C, Mnemonic{"STY ${}", AddressingMode::ABS, 2}},
            {0x84, Mnemonic{"STY ${}", AddressingMode::ZP, 1}},
            {0x94, Mnemonic{"STY ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x0A, Mnemonic{"ASL A", AddressingMode::ACC}},
            {0x0E, Mnemonic{"ASL ${}", AddressingMode::ABS, 2}},
            {0x1E, Mnemonic{"ASL ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x06, Mnemonic{"ASL ${}", AddressingMode::ZP, 1}},
            {0x16, Mnemonic{"ASL ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x4A, Mnemonic{"LSR A", AddressingMode::ACC}},
            {0x4E, Mnemonic{"LSR ${}", AddressingMode::ABS, 2}},
            {0x5E, Mnemonic{"LSR ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x46, Mnemonic{"LSR ${}", AddressingMode::ZP, 1}},
            {0x56, Mnemonic{"LSR ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x2A, Mnemonic{"ROL A", AddressingMode::ACC}},
            {0x2E, Mnemonic{"ROL ${}", AddressingMode::ABS, 2}},
            {0x3E, Mnemonic{"ROL ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x26, Mnemonic{"ROL ${}", AddressingMode::ZP, 1}},
            {0x36, Mnemonic{"ROL ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x6A, Mnemonic{"ROR A", AddressingMode::ACC}},
            {0x6E, Mnemonic{"ROR ${}", AddressingMode::ABS, 2}},
            {0x7E, Mnemonic{"ROR ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x66, Mnemonic{"ROR ${}", AddressingMode::ZP, 1}},
            {0x76, Mnemonic{"ROR ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x29, Mnemonic{"AND #${}", AddressingMode::IMM, 1}},
            {0x2D, Mnemonic{"AND ${}", AddressingMode::ABS, 2}},
            {0x3D, Mnemonic{"AND ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x39, Mnemonic{"AND ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0x25, Mnemonic{"AND ${}", AddressingMode::ZP, 1}},
            {0x35, Mnemonic{"AND ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x21, Mnemonic{"AND (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0x31, Mnemonic{"AND (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0x2C, Mnemonic{"BIT ${}", AddressingMode::ABS, 2}},
            {0x24, Mnemonic{"BIT ${}", AddressingMode::ZP, 1}},
            {0x49, Mnemonic{"EOR #${}", AddressingMode::IMM, 1}},
            {0x4D, Mnemonic{"EOR ${}", AddressingMode::ABS, 2}},
            {0x5D, Mnemonic{"EOR ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x59, Mnemonic{"EOR ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0x45, Mnemonic{"EOR ${}", AddressingMode::ZP, 1}},
            {0x55, Mnemonic{"EOR ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x41, Mnemonic{"EOR (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0x51, Mnemonic{"EOR (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0x09, Mnemonic{"ORA #${}", AddressingMode::IMM, 1}},
            {0x0D, Mnemonic{"ORA ${}", AddressingMode::ABS, 2}},
            {0x1D, Mnemonic{"ORA ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x19, Mnemonic{"ORA ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0x05, Mnemonic{"ORA ${}", AddressingMode::ZP, 1}},
            {0x15, Mnemonic{"ORA ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x01, Mnemonic{"ORA (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0x11, Mnemonic{"ORA (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0x69, Mnemonic{"ADC #${}", AddressingMode::IMM, 1}},
            {0x6D, Mnemonic{"ADC ${}", AddressingMode::ABS, 2}},
            {0x7D, Mnemonic{"ADC ${},X", AddressingMode::X_IN_ABS, 2}},
            {0x79, Mnemonic{"ADC ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0x65, Mnemonic{"ADC ${}", AddressingMode::ZP, 1}},
            {0x75, Mnemonic{"ADC ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x61, Mnemonic{"ADC (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0x71, Mnemonic{"ADC (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0xC9, Mnemonic{"CMP #${}", AddressingMode::IMM, 1}},
            {0xCD, Mnemonic{"CMP ${}", AddressingMode::ABS, 2}},
            {0xDD, Mnemonic{"CMP ${},X", AddressingMode::X_IN_ABS, 2}},
            {0xD9, Mnemonic{"CMP ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0xC5, Mnemonic{"CMP ${}", AddressingMode::ZP, 1}},
            {0xD5, Mnemonic{"CMP ${},X", AddressingMode::X_IN_ZP, 1}},
            {0xC1, Mnemonic{"CMP (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0xD1, Mnemonic{"CMP (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0xE0, Mnemonic{"CPX #${}", AddressingMode::IMM, 1}},
            {0xEC, Mnemonic{"CPX ${}", AddressingMode::ABS, 2}},
            {0xE4, Mnemonic{"CPX ${}", AddressingMode::ZP, 1}},
            {0xC0, Mnemonic{"CPY #${}", AddressingMode::IMM, 1}},
            {0xCC, Mnemonic{"CPY ${}", AddressingMode::ABS, 2}},
            {0xC4, Mnemonic{"CPY ${}", AddressingMode::ZP, 1}},
            {0xE9, Mnemonic{"SBC #${}", AddressingMode::IMM, 1}},
            {0xED, Mnemonic{"SBC ${}", AddressingMode::ABS, 2}},
            {0xFD, Mnemonic{"SBC ${},X", AddressingMode::X_IN_ABS, 2}},
            {0xF9, Mnemonic{"SBC ${},Y", AddressingMode::Y_IN_ABS, 2}},
            {0xE5, Mnemonic{"SBC ${}", AddressingMode::ZP, 1}},
            {0xF5, Mnemonic{"SBC ${},X", AddressingMode::X_IN_ZP, 1}},
            {0xE1, Mnemonic{"SBC (${},X)", AddressingMode::X_IN_ZP_IND, 1}},
            {0xF1, Mnemonic{"SBC (${}),Y", AddressingMode::ZP_IND_Y_IN, 1}},
            {0xCE, Mnemonic{"DEC ${}", AddressingMode::ABS, 2}},
            {0xDE, Mnemonic{"DEC ${},X", AddressingMode::X_IN_ABS, 2}},
            {0xC6, Mnemonic{"DEC ${}", AddressingMode::ZP, 1}},
            {0xD6, Mnemonic{"DEC ${},X", AddressingMode::X_IN_ZP, 1}},
            {0xEE, Mnemonic{"INC ${}", AddressingMode::ABS, 2}},
            {0xFE, Mnemonic{"INC ${},X", AddressingMode::X_IN_ABS, 2}},
            {0xE6, Mnemonic{"INC ${}", AddressingMode::ZP, 1}},
            {0xF6, Mnemonic{"INC ${},X", AddressingMode::X_IN_ZP, 1}},
            {0x4C, Mnemonic{"JMP ${}", AddressingMode::ABS, 2}},
            {0x6C, Mnemonic{"JMP (${})", AddressingMode::ABS_IND, 2}},
            {0x20, Mnemonic{"JSR ${}", AddressingMode::ABS, 2}},
            {0x90, Mnemonic{"BCC ${}", AddressingMode::REL, 1}},
            {0xB0, Mnemonic{"BCS ${}", AddressingMode::REL, 1}},
            {0xF0, Mnemonic{"BEQ ${}", AddressingMode::REL, 1}},
            {0x30, Mnemonic{"BMI ${}", AddressingMode::REL, 1}},
            {0xD0, Mnemonic{"BNE ${}", AddressingMode::REL, 1}},
            {0x10, Mnemonic{"BPL ${}", AddressingMode::REL, 1}},
            {0x50, Mnemonic{"BVC ${}", AddressingMode::REL, 1}},
            {0x70, Mnemonic{"BVS ${}", AddressingMode::REL, 1}},
    };
}

Mnemonic OpcodeTable::find(uint8_t opcode) const {
    auto found = mOpcodeToMnemonicList.find(opcode);

    if (found != mOpcodeToMnemonicList.end())
        return mOpcodeToMnemonicList.find(opcode)->second;

    return {"UNDEFINED", AddressingMode::REL, 1};
}
